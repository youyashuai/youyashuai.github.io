<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用Cloudflare创建无限邮箱</title>
      <link href="/2024/01/05/%E5%88%A9%E7%94%A8Cloudflare%E5%88%9B%E5%BB%BA%E6%97%A0%E9%99%90%E9%82%AE%E7%AE%B1/"/>
      <url>/2024/01/05/%E5%88%A9%E7%94%A8Cloudflare%E5%88%9B%E5%BB%BA%E6%97%A0%E9%99%90%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<p>转自zhile大佬</p><p><a href="https://github.com/pandora-next/deploy">PandoraNext</a>是在老Pandora难以维护，以及GitHub号再三因为cocopilot被封，索性新起号新起的项目。</p><p>其实不是新东西了，很多朋友已经玩过很久了，仓库在这里：<a href="https://github.com/pandora-next/deploy">https://github.com/pandora-next/deploy</a></p><p>这次借着<code>v0.5.0</code>发布了一个好玩的功能，跟大家正式介绍一下。<br>一是为了说一说这个项目，第二点是为了介绍一下如何使用大善人<code>Cloudflare</code>的功能来配合<code>v0.5.0</code>的新功能。</p><p>对了，差点忘说<code>v0.5.0</code>发布了什么新功能，它就是<strong>全代理ChatGPT账号注册流程</strong>。<br>这意味着国内兄弟姐妹们注册<strong>拥有一个自己的ChatGPT账号</strong>难度降低<code>99%</code>。</p><h5 id="有人要问这跟自己去官网注册有何不同？我高低能给你凑出3条理由："><a href="#有人要问这跟自己去官网注册有何不同？我高低能给你凑出3条理由：" class="headerlink" title="有人要问这跟自己去官网注册有何不同？我高低能给你凑出3条理由："></a>有人要问这跟自己去官网注册有何不同？我高低能给你凑出3条理由：</h5><ol><li>免梯，这个懂的都懂，不多解释。</li><li>不受ip注册数量限制，有时间你无限造。</li><li>能装逼。（其实这一条就够了）</li></ol><p>我简单测试了一下，<code>gmail</code>和<code>outlook</code>可以直接注册，而且<code>gmail</code>和<code>outlook</code>通过邮箱别名技巧可以多次注册。<br>国内邮箱<code>qq.com</code> <code>126.com</code> <code>163.com</code> 经测<strong>不支持</strong>。其他我还没试过，各位自行测试。</p><p>不过这些都不重要，我今天水这篇文章是为了告诉大家如何拥有无限邮箱，自己做大号商！现在开始：</p><h4 id="首先我们假设你已经有自己的域名，并且已经使用Cloudflare解析"><a href="#首先我们假设你已经有自己的域名，并且已经使用Cloudflare解析" class="headerlink" title="首先我们假设你已经有自己的域名，并且已经使用Cloudflare解析"></a>首先我们假设你已经有自己的域名，并且已经使用<code>Cloudflare</code>解析</h4><h6 id="我是推荐用大善人Cloudflare的，白嫖点多多，你甚至还可以-1分钟拥有热佬的网站。"><a href="#我是推荐用大善人Cloudflare的，白嫖点多多，你甚至还可以-1分钟拥有热佬的网站。" class="headerlink" title="我是推荐用大善人Cloudflare的，白嫖点多多，你甚至还可以 1分钟拥有热佬的网站。"></a>我是推荐用大善人Cloudflare的，白嫖点多多，你甚至还可以 <a href="https://zhile.io/2023/09/04/copy-jetbra-in.html">1分钟拥有热佬的网站</a>。</h6><ol><li>打开 <a href="https://dash.cloudflare.com/">https://dash.cloudflare.com</a> ，找到你需要的域名。这里我使用我的<code>linux.do</code>举例。<br><img src="https://zhile.io/wp-content/uploads/2023/12/000.png" alt="img"></li><li>在左侧菜单中选择<code>Email</code> -&gt; <code>Email Routing</code>（<code>电子邮件</code> -&gt; <code>电子邮件路由</code>），如果你尚未启用，按照界面引导启用该功能即可。成功之后界面大概如下图（注意等路由状态为<code>已启用</code>方为生效）：<br><img src="https://zhile.io/wp-content/uploads/2023/12/1111.png" alt="img"></li><li>在<code>目标地址</code>选项卡中添加你希望转发到的邮箱地址（可以是QQ邮箱、126.com等国内邮箱），配置这个地址就是为了把只有所有<code>@linux.do</code>的邮件都转发到你这个地址，让你能进行注册验证等功能。<br><img src="https://zhile.io/wp-content/uploads/2023/12/222.png" alt="img"></li><li>添加目标地址如下图的例子（注意把邮箱换成你自己的），填写完成后这个地址显示<code>待验证</code>状态，同时<code>Cloudflare</code>会给你的这个邮箱发送一封验证邮件（验证所有权的意思，毕竟你不能随便用别人的邮箱不是）<br><img src="https://zhile.io/wp-content/uploads/2023/12/333.png" alt="img"><br><img src="https://zhile.io/wp-content/uploads/2023/12/444.png" alt="img"></li><li>验证完成后回到<code>目标地址</code>选项卡后可以看到刚添加的邮箱地址是<code>已验证</code>状态。这些是接下来的前提操作。<br><img src="https://zhile.io/wp-content/uploads/2023/12/555.png" alt="img"></li><li>接下来点击<code>路由规则</code>选项卡，打开<code>Catch-All</code>的开关，并点击编辑按钮到达编辑界面。<br><img src="https://zhile.io/wp-content/uploads/2023/12/666.png" alt="img"></li><li>编辑界面选择如下图（注意替换成自己验证过的邮箱地址），然后保存即可。<br><img src="https://zhile.io/wp-content/uploads/2023/12/777.png" alt="img"></li><li>现在你拥有所有<code>xxx@linux.do</code>的邮箱地址了，我们来试一试注册一个ChatGPT账号看看。<br><img src="https://zhile.io/wp-content/uploads/2023/12/888.png" alt="img"></li><li>注册步骤开始，打开你部署的PandoraNext（如何部署不是文本讨论的话题，阅读仓库说明即可），也可到演示站： <a href="https://chat.oaifree.com/">https://chat.oaifree.com</a> 登录界面点击 <a href="https://chat.oaifree.com/auth/signup">Sign up</a> 链接。<br><img src="https://zhile.io/wp-content/uploads/2023/12/0000.png" alt="img"></li><li>输入你要注册的邮箱（可以用你刚才设置的邮箱，随便一个前缀，看图）和密码，点击<code>Continue</code>。<br><img src="https://zhile.io/wp-content/uploads/2023/12/11111.png" alt="img"></li><li>OpenAI会给你发一封邮件，会由<code>Cloudflare</code>自动转发到你刚才设置的邮箱里收件（比如我设置的 <code>189650239@qq.com</code>），右键复制<code>Verify email address</code>（QQ邮箱可以点一下复制）的地址。<br><img src="https://zhile.io/wp-content/uploads/2023/12/33333.png" alt="img"><br><img src="https://zhile.io/wp-content/uploads/2023/12/55555.png" alt="img"></li><li>把复制的验证链接（注意看链接开头应该如图所示）贴进注册界面的输入框，点<code>OK</code>按钮稍等片刻。<br><img src="https://zhile.io/wp-content/uploads/2023/12/22222-1.png" alt="img"><br><img src="https://zhile.io/wp-content/uploads/2023/12/66666.png" alt="img"></li><li>在<code>Tell us about you</code>输入自己的名字（英文），点击<code>Continue</code>按钮，静静等待（可能会有验证码，按照界面指示验证即可）。<br><img src="https://zhile.io/wp-content/uploads/2023/12/77777.png" alt="img"></li><li>然后就成功了！<br><img src="https://zhile.io/wp-content/uploads/2023/12/88888.png" alt="img"></li><li>用刚才注册的号去登录吧，或者继续注册下去，下去，下去，下去。<br><img src="https://zhile.io/wp-content/uploads/2023/12/99999.png" alt="img"><br><img src="https://zhile.io/wp-content/uploads/2023/12/101010.png" alt="img"></li><li>如果注册过程中出问题，比如说已经账号已存在之类的（此时可能是卡登录流程了）可以直接去登录试试，会恢复未完成的注册流程。<strong>这是一条很重要的操作技巧</strong></li></ol><h4 id="去造啊少年！不过请先去给项目-https-github-com-pandora-next-deploy-点个star吧～"><a href="#去造啊少年！不过请先去给项目-https-github-com-pandora-next-deploy-点个star吧～" class="headerlink" title="去造啊少年！不过请先去给项目 https://github.com/pandora-next/deploy 点个star吧～"></a>去造啊少年！不过请先去给项目 <a href="https://github.com/pandora-next/deploy">https://github.com/pandora-next/deploy</a> 点个star吧～</h4><h3 id="反馈更新："><a href="#反馈更新：" class="headerlink" title="反馈更新："></a>反馈更新：</h3><ul><li>密码中不可包含用户名。</li><li>目前已知 <code>.cn</code>（包括<code>.com.cn</code>等） <code>.top</code> 域名后缀的注册是不被<code>OpenAI</code>支持的。</li><li>如果报错<code>the user already exists</code>，可能是由于以上不支持的原因造成。可直接登录试试，还是失败则可确定。</li><li>目前已知 <code>.com</code> <code>.org</code> <code>.net</code> <code>.io</code> <code>.do</code> <code>.fun</code> <code>.xyz</code> <code>.cc</code> <code>.me</code> <code>.cool</code> <code>.link</code> 后缀可注册。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gemini-proxy利用Cloudflare搭建</title>
      <link href="/2024/01/04/Gemini-proxy%E5%88%A9%E7%94%A8Cloudflare%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/04/Gemini-proxy%E5%88%A9%E7%94%A8Cloudflare%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>转自zhile大佬</p><p>谷歌新一代AI：Gemini发布有一段日子了，<strong>免费1分钟能调用60次</strong>，很慷慨了。<br>谷歌不像某些班子（你知道我说的是谁），其实没什么限制。就在我以为大家都能顺顺利利用上它的时候，却经常能在群里看到群友说自己访问不了、梯子某个节点无法访问Gemini。<br>听到这些，我知道我水文章的机会来了：跟大家说说怎么更好地白嫖Gemini。</p><p>今天继续用我们的大善人cloudflare（简称cf）来达成我们的目的。如果你看过我<a href="https://zhile.io/2023/12/09/pandoranext-introduction.html">之前的文章</a>，你应该已经有个域名在cf了。那就跟着文章的步骤开始吧。</p><p>首先打开 <a href="https://dash.cloudflare.com/">https://dash.cloudflare.com</a> 在左侧菜单点击<code>Workers 和 Pages</code></p><p><img src="https://zhile.io/wp-content/uploads/2023/12/111.png" alt="img"></p><p>点击<code>创建应用程序</code>按钮</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/222-1.png" alt="img"></p><p>点击<code>创建Worker</code>按钮</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/333-1.png" alt="img"></p><p>给你的worker起个名字，我们这里就叫<code>gemini-pro-proxy</code>吧，不重要。然后点击<code>部署</code>按钮即可。</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/444-1.png" alt="img"></p><p>你会看到一个部署成功的页面。页面中包含一个域名，这是你worker的默认域名。如果你自己没有域名，之后你可以直接用这个域名，但应该需要梯子（对梯子质量要求不高）。我们到这一步直接点击<code>编辑代码</code>按钮。</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/555-1.png" alt="img"></p><p>在出来的代码编辑页面，填入以下几行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request, env</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    url.<span class="property">host</span> = <span class="string">&#x27;generativelanguage.googleapis.com&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(url, request))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript</p><p>Copy</p><p>点击右上角的<code>保存并部署</code>按钮即可。</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/666-1.png" alt="img"></p><p>点击左上角你worker的名字，这里是<code>gemini-pro-proxy</code>就可以看到你部署worker的详细信息。</p><p>完成以上步骤，其实你的gemini代理就已经就绪了。你已经可以直接使用你worker的默认地址来替换gemini的api地址，不会再有谷歌阻止你访问。</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/777-1.png" alt="img"></p><p>但如我所说，此时你还是需要梯子去访问你的worker地址，因为gfw默认封禁了这个域名后缀。</p><p>接下来我们进一步设置，用自己的域名去访问。</p><p>转到自己在cf上域名的控制面板，点击左侧菜单<code>DNS</code>来添加域名解析。<br>这里我使用自己的域名<code>baipiao.io</code>，给它增加了子域名A记录：<code>gemini.baipiao.io</code></p><p><img src="https://zhile.io/wp-content/uploads/2023/12/888-1.png" alt="img"></p><p>这里有两个要点：</p><ol><li>不要开启小黄云。</li><li>ip地址可以使用cf的优选工具选出来的高质量ip。</li></ol><p>我这里用了两个我觉得还不错的ip，你们可以直接用，也可以自己去优选。</p><p>DNS解析记录操作完毕之后，点击左侧菜单<code>Workers路由</code>来让我们设置的域名和worker的路由关系。<br>在<code>Workers路由</code>界面，点击<code>添加路由</code>按钮，参考如下填写：</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/999.png" alt="img"></p><p>这里域名换成你刚才设置的那个，Worker也选择你之前创建的。点击<code>保存</code>即可。</p><p>完成这一步你就可以用你自己的域名来请求gemini了。比如我这个域名：</p><p>Gemini官方给的例子是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;contents&quot;:[&#123;&quot;parts&quot;:[&#123;&quot;text&quot;:&quot;Write a story about a magic backpack&quot;&#125;]&#125;]&#125;&#x27;</span> \</span><br><span class="line">  -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY</span><br></pre></td></tr></table></figure><p>Bash</p><p>Copy</p><p>我们替换<code>generativelanguage.googleapis.com</code>部分到我们的域名<code>gemini.baipiao.io</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;contents&quot;:[&#123;&quot;parts&quot;:[&#123;&quot;text&quot;:&quot;Write a story about a magic backpack&quot;&#125;]&#125;]&#125;&#x27;</span> \</span><br><span class="line">  -X POST https://gemini.baipiao.io/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY</span><br></pre></td></tr></table></figure><p>Bash</p><p>Copy</p><p>对了，附一下Gemini Pro的api key获取地址：<a href="https://makersuite.google.com/app/apikey">https://makersuite.google.com/app/apikey</a></p><p>和沉浸式翻译的Gemini设置：</p><p><img src="https://zhile.io/wp-content/uploads/2023/12/0000-1.png" alt="img"></p><h3 id="总结步骤"><a href="#总结步骤" class="headerlink" title="总结步骤"></a>总结步骤</h3><ol><li>添加一个cf的worker，代理gemini的api地址。</li><li>优选ip，设置自己的域名解析（防墙、提速）。</li><li>绑定自己的域名和worker。</li><li>你要是实在不会弄，你就用我搭的那个吧。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cf-sd-to-dalle3项目部署方法</title>
      <link href="/2024/01/04/cf-sd-to-dalle3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/04/cf-sd-to-dalle3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GeminiPro API Proxy反代教程项目部署</title>
      <link href="/2024/01/04/GeminiPro-API-Proxy%E5%8F%8D%E4%BB%A3%E6%95%99%E7%A8%8B%E4%B8%A4%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/01/04/GeminiPro-API-Proxy%E5%8F%8D%E4%BB%A3%E6%95%99%E7%A8%8B%E4%B8%A4%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>Gemini-Proxy项目<br>1、palm-proxy<br>项目地址：<a href="https://github.com/antergone/palm-proxy">https://github.com/antergone/palm-proxy</a><br>线上部署： <a href="https://vercel.com/new/clone?repository-url=https://github.com/antergone/palm-proxy">vercel</a></p><p>教程 <u><a href="https://simonmy.com/posts/%E4%BD%BF%E7%94%A8vercel%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86google-palm-api.html">https://simonmy.com/posts/使用vercel反向代理google-palm-api.html</a></u></p><p><a href="https://simonmy.com/posts/%E4%BD%BF%E7%94%A8netlify%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86google-palm-api.html">https://simonmy.com/posts/使用netlify反向代理google-palm-api.html</a></p><p>2、gemini-proxy</p><p>项目地址：</p><p>线上部署：<a href="https://vercel.com/new/clone?repository-url=https://github.com/CaoYunzhou/gemini-proxy">vercel</a></p><p>官方使用示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://generativelanguage.googleapis.com/v1beta/models?key=$API_KEY</span><br></pre></td></tr></table></figure><p>Vercel反代后的使用示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://gemini.aivvm.com/v1beta/models?key=$API_KEY</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl https://gemini.aivvm.com/v1beta/models/gemini-pro:generateContent?key=$API_KEY \</span><br><span class="line">    -H &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">    -X POST \</span><br><span class="line">    -d &#x27;&#123;</span><br><span class="line">      &quot;contents&quot;: [</span><br><span class="line">        &#123;&quot;role&quot;:&quot;user&quot;,</span><br><span class="line">         &quot;parts&quot;:[&#123;</span><br><span class="line">           &quot;text&quot;: &quot;鲁迅为什么打周树人？&quot;&#125;]&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;&#x27;</span><br></pre></td></tr></table></figure><p> 沉浸式翻译配置如下</p><ul><li>API KEY 填Google的秘钥</li><li>自定义 API 接口地址：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gemini.aivvm.com/v1/models/gemini-pro:generateContent?key=&#123;key&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GeminiPro项目部署方法</title>
      <link href="/2024/01/04/GeminiPro%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/04/GeminiPro%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>合理使用GeminiPro API项目<br>开源项目地址<a href="https://github.com/Deeptrain-Community/chatnio">https://github.com/Deeptrain-Community/chatnio</a><br><img src="https://cdn.jsdelivr.net/gh/youyashuai/pic@main/img/202401041442095.webp"><br>支持线上部署 <a href="https://vercel.com/new/clone?repository-url=https://github.com/babaohuang/GeminiProChat&env=GEMINI_API_KEY&envDescription=Google%20API%20Key%20for%20GeminiProChat&envLink=https://makersuite.google.com/app/apikey&project-name=gemini-pro-chat&repository-name=gemini-pro-chat&demo-title=Gemini%20Pro%20Chat&demo-description=Minimal%20web%20UI%20for%20Gemini%20Pro.&demo-url=https://geminiprochat.com&demo-image=https://geminiprochat.com/icon.svg">Vercel</a>  、<a href="https://railway.app/template/v9QL5u?referralCode=tSzmIe">Railway</a>、 <a href="https://zeabur.com/templates/1103PJ">Zeabur</a><br>Docker部署使用命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name geminiprochat \</span><br><span class="line">--restart always \</span><br><span class="line">-p 3000:3000 \</span><br><span class="line">-itd \</span><br><span class="line">-e GEMINI_API_KEY=your_api_key_here \</span><br><span class="line">babaohuang/geminiprochat:latest</span><br></pre></td></tr></table></figure><p>请确保将 your_api_key_here 替换为你自己的 Gemini API 密钥。<br>这将启动 geminiprochat 服务，访问地址为 “<a href="http://localhost:3000”">http://localhost:3000”</a><br>环境变量</p><table><thead><tr><th>名称</th><th>说明</th><th>必填</th></tr></thead><tbody><tr><td><code>GEMINI_API_KEY</code></td><td>你的 Gemini API 密钥。可以从<a href="https://makersuite.google.com/app/apikey">此处</a> 获取。</td><td><strong>✔</strong></td></tr><tr><td><code>API_BASE_URL</code></td><td>Gemini API 的自定义基本 URL。点击<a href="https://github.com/babaohuang/GeminiProChat/README_cn.md#solution-for-user-location-is-not-supported-for-the-api-use">此处</a>查看何时使用这个。</td><td>❌</td></tr><tr><td><code>HEAD_SCRIPTS</code></td><td>在页面的“”之前注入分析或其他脚本</td><td>❌</td></tr><tr><td><code>PUBLIC_SECRET_KEY</code></td><td>项目的密文字符串。用于为 API 调用生成签名</td><td>❌</td></tr><tr><td><code>SITE_PASSWORD</code></td><td>为网站设置密码，支持用逗号分隔的多个密码。如果不设置，网站将允许公开访问</td><td>❌</td></tr></tbody></table><p>本地部署</p><p>环境</p><ol><li><p><strong>Node</strong>: 检查你的开发环境和部署环境是否都在使用 <code>Node v18</code> 或更高版本。你可以使用 <a href="https://github.com/nvm-sh/nvm">nvm</a> 在本地管理多个 <code>node</code> 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li><li><p><strong>PNPM</strong>: 我们建议使用 <a href="https://pnpm.io/">pnpm</a> 来管理依赖关系。如果从未安装过 pnpm，可以使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pnpm</span><br></pre></td></tr></table></figure></li><li><p><strong>GEMINI_API_KEY</strong>: 在运行此应用程序之前，你需要从 Google 获取 API 密钥。你可以前往 <a href="https://makersuite.google.com/app/apikey%EF%BC%8C%E7%94%B3%E8%AF%B7">https://makersuite.google.com/app/apikey，申请</a> API 密钥。</p></li></ol><p> 部署</p><ol><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br></pre></td></tr></table></figure></li><li><p>复制 <code>.env.example</code> 文件并重命名为 <code>.env</code>，并在 <code>.env</code> 文件中添加 <a href="https://makersuite.google.com/app/apikey"><code>GEMINI_API_KEY</code></a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GEMINI_API_KEY=AIzaSy...</span><br></pre></td></tr></table></figure></li><li><p>运行应用程序，项目会在 <code>http://localhost:3000/</code> 上运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure></li></ol><p>Error解答</p><h4 id="关于-API-使用过程中-“User-location-is-not-supported-for-the-API-use”-的解决方案"><a href="#关于-API-使用过程中-“User-location-is-not-supported-for-the-API-use”-的解决方案" class="headerlink" title="关于 API 使用过程中 “User location is not supported for the API use” 的解决方案"></a>关于 API 使用过程中 “User location is not supported for the API use” 的解决方案</h4><p>如果你遇到了 <strong>“User location is not supported for the API use”</strong> 的问题，请按照以下步骤进行解决：</p><ol><li>前往 <a href="https://github.com/antergone/palm-netlify-proxy"><strong>palm-netlify-proxy</strong></a> 仓库并点击其中的 <strong>“Deploy With Netlify</strong>。</li><li>部署完成后，你将收到 Netlify 分配的域名 （例如 <code>https://xxx.netlify.app</code>）。</li><li>在你的 <strong>Gemini Pro Chat</strong> 项目中，设置名为 <code>API_BASE_URL</code> 的环境变量，其值为部署 palm-proxy 时获得的域名 (<code>https://xxx.netlify.app</code>)。</li><li>重新部署你的 <strong>Gemini Pro Chat</strong> 项目来完成配置。这应该可以解决问题。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare-AI-Web项目部署</title>
      <link href="/2024/01/04/Cloudflare-AI-Web%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/01/04/Cloudflare-AI-Web%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LobeHub项目部署方法</title>
      <link href="/2024/01/04/LobeHub%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/04/LobeHub%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NextChat项目部署方法</title>
      <link href="/2024/01/04/NextChat%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/04/NextChat%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare AI Whisper使用方法</title>
      <link href="/2024/01/04/Cloudflare-AI-Whisper%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/04/Cloudflare-AI-Whisper%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gpt_academic配置oneapi教程</title>
      <link href="/2024/01/04/gpt-academic%E9%85%8D%E7%BD%AEoneapi%E6%95%99%E7%A8%8B/"/>
      <url>/2024/01/04/gpt-academic%E9%85%8D%E7%BD%AEoneapi%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub图床搭建及使用</title>
      <link href="/2024/01/04/GitHub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/01/04/GitHub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git配置Http(s)代理</title>
      <link href="/2023/12/29/Git%E9%85%8D%E7%BD%AEHttp-s-%E4%BB%A3%E7%90%86/"/>
      <url>/2023/12/29/Git%E9%85%8D%E7%BD%AEHttp-s-%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在某些情况下需要添加Git代理，公司仅提供pac代理文件，主要作用于网络层中的应用层，对Git难以奏效</p><p>pac文件为js文件，可进行反编译来获得Git所需的http(s)代理，<a href="https://www.vercel.cloudns.org/2023/12/29/PAC%E6%8F%90%E5%8F%96http(s)%E4%BB%A3%E7%90%86%E5%9C%B0%E5%9D%80/">PAC提取http(https)代理地址</a></p><h5 id="添加Git-代理"><a href="#添加Git-代理" class="headerlink" title="添加Git 代理"></a>添加Git 代理</h5><p>Bash环境下，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &quot;http://agent.xxxx.com:8888&quot;</span><br><span class="line">git config --global https.proxy &quot;https://agent.xxxx.com:8888&quot;</span><br></pre></td></tr></table></figure><p>Tips：<a href="http://agent.xxxx.com:8888/">http://agent.xxxx.com:8888</a> 替换为自己的proxy</p><h5 id="删除Git-代理"><a href="#删除Git-代理" class="headerlink" title="删除Git 代理"></a>删除Git 代理</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h5 id="查看Git-代理状态"><a href="#查看Git-代理状态" class="headerlink" title="查看Git 代理状态"></a>查看Git 代理状态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PAC提取http(https)代理地址</title>
      <link href="/2023/12/29/PAC%E6%8F%90%E5%8F%96http(s)%E4%BB%A3%E7%90%86%E5%9C%B0%E5%9D%80/"/>
      <url>/2023/12/29/PAC%E6%8F%90%E5%8F%96http(s)%E4%BB%A3%E7%90%86%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>原理：pac文件是javascript函数，通过插件Proxy switchy 可查看修改后的编码段；</p><p>若加密，则可通过开发者工具，在控制台Console中键入decodeURI()反编译解密真实http(s) proxy</p><p><img src="https://cdn.jsdelivr.net/gh/youyashuai/pic@main/img/202312291731130.png" alt="图片alt" title="图片title"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo在多台电脑设备同步提交更新github_pages博客</title>
      <link href="/2023/12/28/Hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%96%B0github-pages%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/12/28/Hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%96%B0github-pages%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本文采用主流解决方案：创建git分支实现多设备Hexo项目的同步与更新</p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>创建名为hexo的分支（名字随意）</p><h4 id="设置hexo分支为默认分支"><a href="#设置hexo分支为默认分支" class="headerlink" title="设置hexo分支为默认分支"></a>设置hexo分支为默认分支</h4><p>项目仓库的Settings-&gt;Branches-&gt;Default branch修改为hexo</p><h4 id="克隆远程hexo分支仓库到本地"><a href="#克隆远程hexo分支仓库到本地" class="headerlink" title="克隆远程hexo分支仓库到本地"></a>克隆远程hexo分支仓库到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxx.github.io.git</span><br></pre></td></tr></table></figure><h4 id="删除hexo分支除-git之外的内容"><a href="#删除hexo分支除-git之外的内容" class="headerlink" title="删除hexo分支除.git之外的内容"></a>删除hexo分支除.git之外的内容</h4><p>删除克隆本地的hexo分支文件夹除.git之外的内容<br>执行bash命令更新删除到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;--&quot;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>将hexo分支克隆到本地的.git文件夹复制到Blog文件夹</p><h4 id="将修改后的文件夹推送远程hexo分支"><a href="#将修改后的文件夹推送远程hexo分支" class="headerlink" title="将修改后的文件夹推送远程hexo分支"></a>将修改后的文件夹推送远程hexo分支</h4><p>在Blog文件夹下执行bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;提交描述&quot;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>Tips ：注意themes目录下如存在.git需要删除，嵌套git会无法上传主题</p><h4 id="在其他电脑设备克隆hexo分支"><a href="#在其他电脑设备克隆hexo分支" class="headerlink" title="在其他电脑设备克隆hexo分支"></a>在其他电脑设备克隆hexo分支</h4><p>安装git、node.js、npm环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxx.github.io.git</span><br></pre></td></tr></table></figure><p>进入克隆本地项目文件夹，安装依赖，生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>本地预览网站<a href="http://localhost:4000/">http://localhost:4000</a><br>发布博文执行hexo三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h4 id="分支hexo中网站原始文件同步更新"><a href="#分支hexo中网站原始文件同步更新" class="headerlink" title="分支hexo中网站原始文件同步更新"></a>分支hexo中网站原始文件同步更新</h4><p>执行bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;描述&quot;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><h4 id="在每台设备上同步更新"><a href="#在每台设备上同步更新" class="headerlink" title="在每台设备上同步更新"></a>在每台设备上同步更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull 或 git pull hexo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github+Vercel搭建个人博客网站实录</title>
      <link href="/2023/12/27/Hexo-Github-Vercel%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%AE%9E%E5%BD%95/"/>
      <url>/2023/12/27/Hexo-Github-Vercel%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%AE%9E%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本文记录利用GitHub Pages搭建Hexo静态博客记录，主要面向弱CODE基础同学</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>Git 官网下载安装”<a href="https://git-scm.com/">https://git-scm.com/</a>“<br>node.js 官网下载安装“<a href="https://nodejs.org/%E2%80%9D">https://nodejs.org/”</a><br>npm 默认集成在node.js，正常无需再次安装<br>可在git bash中检查是否安装成功（如下无明确说明皆是git bash中操作）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>npm安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h5 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h5><p>eg. 博客命名 Blog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br><span class="line"><span class="built_in">cd</span> Blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><font color=Red>Tips</font>:也可以新建文件夹Blog，在Blog文件夹内右键打开git bash 使用命令 npm install</p><h5 id="生成Hexo静态文件"><a href="#生成Hexo静态文件" class="headerlink" title="生成Hexo静态文件"></a>生成Hexo静态文件</h5><p>运行 hexo g 或者 hexo generate 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h5 id="本地预览Hexo静态文件"><a href="#本地预览Hexo静态文件" class="headerlink" title="本地预览Hexo静态文件"></a>本地预览Hexo静态文件</h5><p>运行 hexo s 或 hexo server 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成本地预览网站链接 <a href="http://localhost:4000/">http://localhost:4000</a> </p><h4 id="提交Github-Pages"><a href="#提交Github-Pages" class="headerlink" title="提交Github Pages"></a>提交Github Pages</h4><h5 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h5><p>你的Github用户名.github.io<br><font color=Red>Tips</font>:若导入vercel容器，可以自由命名</p><h5 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h5><p>git bash中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你注册github的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>生成公钥命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你注册github的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>Github个人主页点击头像<br>Setting-SSH and GPG keys-New SSH Key-粘贴公钥<br>验证命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>修改Blog文件夹下_config.yml_ 文件内容，替换对应代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/你的github用户名/你的github用户名.github.io.git,main</span></span><br></pre></td></tr></table></figure><p>安装推送命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>清理缓存，生成静态文件，推送到GitHub命令，hexo三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><font color=Red>Tips</font>：也可以hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br><img src="https://cdn.jsdelivr.net/gh/youyashuai/pic@main/img/202312281753789.png" alt="图片alt" title="图片title"><br>博客地址：<br>你的GitHub用户名.github.io</p><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>eg.安装Butterfly主题为例 参考文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p><font color=Red>Tips</font>:命令中 -b master 指克隆指定master分支代码</p><h5 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>修改Blog文件夹下修改  <em>config.yml</em>  主题名称<br>theme: butterfly<br>再次Hexo三连<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><p>####部署vercel后期再水一篇</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主题 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
